name: Database Deployment Flow

on:
  push:
    branches:
      - main
      - qa

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up MySQL
        run: sudo apt-get install mysql-client

      - name: Determine environment
        id: set-env-vars
        run: |
          echo "GITHUB_REF is: ${GITHUB_REF}"
          if [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
            echo "Branch is main"
            echo "DB_NAME=${{ secrets.DB_NAME_PROD }}" >> $GITHUB_ENV
            echo "DB_NAME set to: ${{ secrets.DB_NAME_PROD }}"
          elif [[ "${GITHUB_REF}" == "refs/heads/qa" ]]; then
            echo "Branch is qa"
            echo "DB_NAME=${{ secrets.DB_NAME_QA }}" >> $GITHUB_ENV
            echo "DB_NAME set to: ${{ secrets.DB_NAME_QA }}"
          else
            echo "Branch is not main or qa"
          fi

      - name: Check migration status
        id: check-migration-status
        run: |
          if grep -q "PENDING" migration_status.txt; then
            echo "Migrations are pending"
            echo "MIGRATIONS_PENDING=true" >> $GITHUB_ENV
          else
            echo "No migrations are pending"
            echo "MIGRATIONS_PENDING=false" >> $GITHUB_ENV
          fi

      - name: Print environment variables for debugging
        run: |
          echo "DB_NAME: $DB_NAME"
          echo "MIGRATIONS_PENDING: $MIGRATIONS_PENDING"

      - name: Run migrations
        if: env.MIGRATIONS_PENDING == 'true'
        env:
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ env.DB_NAME }}
        run: |
          echo "Running migrations..."
          chmod +x migrations.sh
          ./migrations.sh

      - name: Reset migration status
        if: env.MIGRATIONS_PENDING == 'true'
        run: echo "NOT_PENDING" > migration_status.txt

      - name: Deploy application (if applicable)
        if: env.MIGRATIONS_PENDING == 'false'
        run: |
          echo "No migrations needed ..."
